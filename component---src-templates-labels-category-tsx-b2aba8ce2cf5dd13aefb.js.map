{"version":3,"file":"component---src-templates-labels-category-tsx-b2aba8ce2cf5dd13aefb.js","mappings":"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","sources":["webpack://talk/./src/components/author/index.tsx","webpack://talk/./src/components/issues_num/index.tsx","webpack://talk/./src/components/label/index.tsx","webpack://talk/./src/templates/labels-category.tsx","webpack://talk/./src/hooks/useIssuesList.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { go, fmtDate } from '@utils/tools';\n\nimport './index.scss';\n\ninterface AuthorProps {\n  author: any;\n  date?: Date;\n  extra?: React.ReactNode;\n}\n\nconst Author: FC<AuthorProps> = (props) => {\n  const author = props.author;\n  return (\n    <div className=\"author-info\">\n      <span\n        className=\"author\"\n        title={author.url}\n        onClick={() => go(author.url)}\n      >\n        <img src={author.avatarUrl} alt={author.login} />\n        <span>{author.login}</span>\n      </span>\n      {props.date && <i className=\"date\">{fmtDate(props.date)}</i>}\n      {props.extra}\n    </div>\n  );\n};\n\nexport default Author;\n","import React, { FC } from 'react';\nimport clsx from 'clsx';\n\nimport { fmtIssues } from '@utils/tools';\nimport useRgd from '@hooks/useRgd';\n\nimport './index.scss';\n\ninterface IssuesNumProps {\n  number: number;\n  len?: number;\n  className?: string;\n}\n\nconst IssuesNum: FC<IssuesNumProps> = (props) => {\n  const rgdData = useRgd();\n\n  let _link;\n  switch (rgdData.type) {\n    case 'issues':\n      _link = `https://github.com/${rgdData.issues_owner}/${rgdData.issues_repo}/issues/${props.number}`;\n      break;\n    case 'discussions2':\n      _link = `https://github.com/${rgdData.dis_owner}/${rgdData.dis_repo}/discussions/${props.number}`;\n      break;\n    default:\n      _link = `https://github.com/${rgdData.owner}/${rgdData.repo}/discussions/${props.number}`;\n  }\n\n  return (\n    <a\n      className={clsx('number issues-num', props.className)}\n      href={_link}\n      target=\"_blank\"\n    >\n      {props.len ? fmtIssues(props.number, props.len) : `#${props.number}`}\n    </a>\n  );\n};\n\nexport default IssuesNum;\n","import React, { FC } from 'react';\nimport { Link } from 'gatsby';\n\nimport { fmtURI, getLevel } from '@utils/tools';\nimport useRgd from '@hooks/useRgd';\n\nimport './index.scss';\n\ninterface LabelProps {\n  data: any;\n  hasLevel?: boolean;\n}\n\nconst Label: FC<LabelProps> = ({ data, hasLevel }) => {\n  const rgdData = useRgd();\n\n  return (\n    <Link\n      key={data.name}\n      className=\"gg-label\"\n      style={{ borderColor: `#${data.color}` }}\n      to={`/labels/${fmtURI(data.name)}`}\n    >\n      <b style={{ background: `#${data.color}` }}>\n        #\n        {hasLevel && (\n          <span>\n            {' '}\n            {getLevel(data.description, rgdData?.website?.label_level)}\n          </span>\n        )}\n      </b>\n      <em>{data.name}</em>\n    </Link>\n  );\n};\n\nLabel.defaultProps = {\n  hasLevel: false,\n};\n\nexport default Label;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { Link } from 'gatsby';\nimport includes from 'lodash/includes';\nimport clsx from 'clsx';\n\nimport IssuesNum from '@comps/issues_num';\nimport useRgd from '@hooks/useRgd';\nimport useIssuesList from '@hooks/useIssuesList';\nimport Author from '@comps/author';\nimport Layout from '@layouts/base';\nimport Label from '@comps/label';\nimport { fmtLabelsCategory } from '@utils/tools';\nimport '@styles/labels-category.scss';\n\nexport default function BlogLabelsCategory(props: any) {\n  const colorMap = props.pageContext.colorMap;\n  const { website } = useRgd();\n  const issuesList = useIssuesList();\n  const [activeTab, setActiveTab] = useState('');\n  const [activeLevel, setActiveLevel] = useState('list');\n  const labelsMap: any = useMemo(\n    () =>\n      fmtLabelsCategory(\n        issuesList,\n        website?.label_category,\n        website?.label_level\n      ),\n    []\n  );\n\n  const handleTab = (active: string) => {\n    setActiveTab(active);\n    setActiveLevel('list');\n  };\n  const handleLevel = (active: string) => {\n    setActiveLevel(active);\n  };\n\n  useEffect(() => {\n    setActiveTab(Object.keys(labelsMap)?.[0]);\n  }, []);\n\n  const listData = labelsMap?.[activeTab]?.list;\n  const hasUser = includes(website?.home_layout, 'user');\n\n  return (\n    <Layout className=\"labels-category-page\">\n      <div className=\"markdown-body issues-list\">\n        <div className=\"gg-label-category-head\">\n          <div className=\"category-group\">\n            {Object.keys(labelsMap).map((item, idx) => {\n              return (\n                <div\n                  key={`${item}_${idx}`}\n                  className={clsx('label-category', {\n                    active: item === activeTab,\n                  })}\n                  style={{ background: `#${colorMap[item]}` }}\n                  onClick={() => handleTab(item)}\n                >\n                  {item}\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"level-group\">\n            {labelsMap?.[activeTab] &&\n              labelsMap?.[activeTab].level\n                ?.sort()\n                ?.map((item: any, idx: number) => {\n                  if (item === 'list') return null;\n                  return (\n                    <div\n                      key={`${item}_${idx}`}\n                      className={clsx('label-level', `level${++idx}`, {\n                        active: activeLevel === item,\n                      })}\n                      style={{ background: `#${colorMap[item]}` }}\n                      onClick={() => handleLevel(item)}\n                    >\n                      {item}\n                    </div>\n                  );\n                })}\n          </div>\n        </div>\n        <div className=\"gg-category-content issues-list\">\n          <div>\n            {listData\n              ?.filter((i: any) => {\n                if (activeLevel === 'list') return true;\n                return includes(i.level, activeLevel.toLocaleUpperCase());\n              })\n              ?.map((node: any) => {\n                if (!node) return null;\n                return (\n                  <div key={node.number} className=\"item\">\n                    {hasUser && (\n                      <Author\n                        author={node.author}\n                        date={node.updatedAt}\n                        extra={<IssuesNum number={node.number} />}\n                      />\n                    )}\n                    <div className=\"post-info\">\n                      {!hasUser && (\n                        <IssuesNum\n                          className=\"label-issue\"\n                          number={node.number}\n                        />\n                      )}\n                      <Link className=\"title\" to={`/issues/${node.number}`}>\n                        {node.title}\n                      </Link>\n                    </div>\n                    {includes(website?.home_layout, 'label') && (\n                      <div className=\"labels-list\">\n                        {node.labels.map((label: any) => {\n                          return (\n                            <Label key={label.name} data={label} hasLevel />\n                          );\n                        })}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport default function useIssuesList() {\n  const data = useStaticQuery(graphql`\n    {\n      allDiscussionsJson {\n        nodes {\n          node {\n            number\n            title\n            updatedAt\n            author {\n              avatarUrl\n              login\n              url\n            }\n            category {\n              name\n              isAnswerable\n              emoji\n            }\n            labels {\n              edges {\n                node {\n                  id\n                  name\n                  color\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  let list = data?.allDiscussionsJson?.nodes || [];\n  const newlist: any = [];\n  list.forEach((i: any) => {\n    let labels = i?.node?.labels?.edges;\n    const _labels = labels ? labels.map((j: any) => j.node) : [];\n    if (i.node) newlist.push({ ...i.node, labels: _labels });\n  });\n  return newlist;\n}\n"],"names":["props","author","React","className","title","url","onClick","go","src","avatarUrl","alt","login","date","fmtDate","extra","_link","rgdData","useRgd","type","issues_owner","issues_repo","number","dis_owner","dis_repo","owner","repo","clsx","href","target","len","fmtIssues","Label","data","hasLevel","Link","key","name","style","borderColor","color","to","fmtURI","background","getLevel","description","website","_rgdData$website","label_level","defaultProps","BlogLabelsCategory","list","newlist","colorMap","pageContext","issuesList","useStaticQuery","allDiscussionsJson","nodes","forEach","i","labels","node","_i$node","_i$node$labels","edges","_labels","map","j","push","useState","activeTab","setActiveTab","activeLevel","setActiveLevel","labelsMap","useMemo","fmtLabelsCategory","label_category","useEffect","Object","keys","_Object$keys","listData","_labelsMap$activeTab","hasUser","includes","home_layout","Layout","item","idx","active","level","_labelsMap$activeTab$","sort","_labelsMap$activeTab$2","filter","toLocaleUpperCase","_listData$filter","Author","updatedAt","IssuesNum","label"],"sourceRoot":""}